struct Camera {
    model: mat4x4<f32>,
    view: mat4x4<f32>,
    projection: mat4x4<f32>
};

@binding(0) @group(0) var<uniform> camera: Camera;

struct Particle {
    position: vec4<f32>, // xyz = position, w = density
    velocity: vec4<f32>  // xyz = velocity, w = pressure
};

struct VertexOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) density: f32,
    @location(1) pressure: f32
};

@vertex
fn vertexMain(@location(0) position: vec4<f32>, @location(1) velocity: vec4<f32>) -> VertexOutput {
    var output: VertexOutput;
    output.position = camera.projection * camera.view * camera.model * vec4<f32>(position.xyz, 1.0);
    output.density = position.w;    // Pass density to fragment shader
    output.pressure = velocity.w;   // Pass pressure to fragment shader
    return output;
}

@fragment
fn fragmentMain(
    @location(0) density: f32,
    @location(1) pressure: f32
) -> @location(0) vec4<f32> {
    // Color mapping based on density (similar to Vulkan implementation)
    let lowColor = vec3<f32>(0.0, 0.0, 1.0);  // Blue
    let highColor = vec3<f32>(1.0, 0.0, 0.0); // Red
    
    let normalizedDensity = density / 1000.0;
    let color = mix(lowColor, highColor, normalizedDensity);
    
    return vec4<f32>(color, 1.0);
}